"use strict";(self.webpackChunkwebsite_miralis=self.webpackChunkwebsite_miralis||[]).push([[5899],{9233:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var n=r(4848),s=r(8453);const t={title:"What is Miralis?",sidebar_position:1},a=void 0,o={id:"introduction",title:"What is Miralis?",description:"Miralis is a RISC-V firmware that virtualizes RISC-V firmware.",source:"@site/docs/introduction.md",sourceDirName:".",slug:"/introduction",permalink:"/docs/introduction",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"What is Miralis?",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Quick Start",permalink:"/docs/quick_start"}},l={},c=[{value:"Motivation",id:"motivation",level:2},{value:"How does it work?",id:"how-does-it-work",level:2},{value:"What can Miralis be useful for?",id:"what-can-miralis-be-useful-for",level:2},{value:"Which platforms are supported?",id:"which-platforms-are-supported",level:2}];function d(e){const i={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:["Miralis is a RISC-V firmware that virtualizes RISC-V firmware.\nWe call Miralis a ",(0,n.jsx)(i.em,{children:"Virtual Firmware Monitor"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"motivation",children:"Motivation"}),"\n",(0,n.jsx)(i.p,{children:"Usually, low level software is granted high privilege.\nFor instance, on RISC-V, platform-specific operations such as cache configuration and power management are handled in M-mode, with full access to all the machine's code and data.\nThis is not a great situation: any bug or vulnerability in the machine's firmware can take down or compromise the whole system."}),"\n",(0,n.jsx)(i.p,{children:"This can be easily solved by re-designing system firmware, leveraging ideas from the multitude of micro-kernels.\nUnfortunately, it is hard to convince all hardware vendors to re-design their firmware.\nMiralis provides an alternative solution by efficiently de-privileging unmodified vendor firmware."}),"\n",(0,n.jsx)(i.h2,{id:"how-does-it-work",children:"How does it work?"}),"\n",(0,n.jsx)(i.p,{children:"On RISC-V processors, firmware typically runs in M-mode, below the kernel:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\nU-mode  \u2502   User App   \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\nS-mode  \u2502    Kernel    \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\nM-mode  \u2502   Firmware   \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Miralis instead runs firmware in U-mode and emulates privileged instructions and memory accesses, creating the illusion of a virtual M-mode (vM-mode).\nThis is a classic virtualization technique also known as ",(0,n.jsx)(i.em,{children:"trap and emulate"}),"."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\nU-mode  \u2502   User App   \u2502 \u2502  Firmware  \u2502 vM-mode\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nS-mode  \u2502    Kernel    \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\nM-mode  \u2502           Miralis           \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,n.jsx)(i.p,{children:"Internally, Miralis implements an emulator for the privileged subset of the RISC-V instruction set, and keeps shadow copies of all privileged control and status registers (CSRs).\nThe virtualized firmware can only observe and modify the shadow copies of the CSRs, but not the actual hardware registers.\nSimilarly, Miralis uses physical memory protection (PMP) to block access to sensitive memory regions.\nThis allows Miralis to virtualized memory mapped I/O devices (MMIO) such as interrupt controllers."}),"\n",(0,n.jsx)(i.p,{children:"Importantly, Miralis does not interfere with the kernel or user applications execution, and therefore introduces no overhead on OS execution."}),"\n",(0,n.jsx)(i.h2,{id:"what-can-miralis-be-useful-for",children:"What can Miralis be useful for?"}),"\n",(0,n.jsx)(i.p,{children:"Virtualizing the firmware can be useful for a variety of use cases:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Security"}),": Miralis can enforce strict boundaries between firmware and the rest of the system, limiting the impact of firmware bugs and vulnerabilities.\nMiralis also supports ",(0,n.jsx)(i.em,{children:"Trusted Execution Environments"})," (TEEs), such as secure enclaves."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Debugging"}),": Miralis fully virtualizes firmware state, and can be used to inspect or modify registers, inject virtual interrupts, and emulate MMIO devices."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Reverse engineering"}),": Miralis interposes on all firmware operations, and can collect traces of firmware behavior such as access patters to MMIO devices."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"which-platforms-are-supported",children:"Which platforms are supported?"}),"\n",(0,n.jsxs)(i.p,{children:["Currently, Miralis supports 64-bits RISC-V platforms.\nThe CPU must have support for at least M and U-mode as well as physical memory protection (PMP).\nCurrently supported platforms are listed ",(0,n.jsx)(i.a,{href:"/docs/platforms/",children:"here"}),".\nAdding support for additional platforms should be relatively straightforward."]})]})}function u(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,i,r)=>{r.d(i,{R:()=>a,x:()=>o});var n=r(6540);const s={},t=n.createContext(s);function a(e){const i=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(t.Provider,{value:i},e.children)}}}]);