"use strict";(self.webpackChunkwebsite_miralis=self.webpackChunkwebsite_miralis||[]).push([[5576],{8456:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>t,metadata:()=>a,toc:()=>h});var s=n(4848),r=n(8453);const t={title:"Vision Five 2",sidebar_position:1},o=void 0,a={id:"platforms/visionfive2",title:"Vision Five 2",description:"The VisionFive 2 is a RISC-V quad-core board from StarFive.",source:"@site/docs/platforms/visionfive2.md",sourceDirName:"platforms",slug:"/platforms/visionfive2",permalink:"/docs/platforms/visionfive2",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Vision Five 2",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Platforms",permalink:"/docs/platforms/"},next:{title:"HiFive Premier P550",permalink:"/docs/platforms/premierp550"}},l={},h=[{value:"Building a Miralis Image",id:"building-a-miralis-image",level:2},{value:"Overview",id:"overview",level:3},{value:"Summary: building the Miralis image",id:"summary-building-the-miralis-image",level:3},{value:"Flashing the Miralis Image",id:"flashing-the-miralis-image",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function d(e){const i={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:["The VisionFive 2 is a RISC-V quad-core board from StarFive.\nA useful resource for getting started is the official ",(0,s.jsx)(i.a,{href:"https://doc-en.rvspace.org/VisionFive2/PDF/VisionFive2_QSG.pdf",children:"Quick Start Guide"}),", which explains how to connect a UART to the board and install a default image."]}),"\n",(0,s.jsx)(i.p,{children:"This guide covers how to build a Miralis image for the VisionFive 2 and how to install it on the board.\nBefore starting, ensure that an OS image has been flashed on the SD card (see section 3.3 of the Quick Start Guide) and that the board boots properly with the default configuration.\nThe shell commands below assume the current directory is the root of the Miralis repository."}),"\n",(0,s.jsx)(i.h2,{id:"building-a-miralis-image",children:"Building a Miralis Image"}),"\n",(0,s.jsx)(i.p,{children:"This section first gives an overview of the process of building the firmware image, and then provides a summary of the steps required to build a Miralis image at the end of the section."}),"\n",(0,s.jsx)(i.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(i.p,{children:"Miralis comes with a configuration file for the VisionFive 2. To build a compatible Miralis binary, simply run:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sh",children:"just build config/visionfive2-release.toml\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The Miralis binary needs to be packaged into a proper FIT image that can be loaded on the VisionFive 2.\nTo do so, first install the ",(0,s.jsx)(i.a,{href:"https://linux.die.net/man/1/mkimage",children:(0,s.jsx)(i.code,{children:"mkimage"})})," U-Boot tool."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"mkimage"})," creates firmware images (FIT images) that can be flashed on the VisionFive 2.\nA FIT image is created from an ",(0,s.jsx)(i.em,{children:"Image Tree Source"})," file (ITS, with a ",(0,s.jsx)(i.code,{children:".its"})," extension) and firmware binaries.\nThe ITS file lists the paths of the firmware binaries to include and their layout in memory.\nHere is an example of an ITS file for the VisionFive 2:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-c",metastring:'title="visionfive2.its"',children:'/dts-v1/;\n\n/ {\n        description = "U-boot-spl FIT image for JH7110 VisionFive2";\n        #address-cells = <2>;\n\n        images {\n                firmware {\n                        description = "miralis";\n                        data = /incbin/("../target/riscv-unknown-miralis/release/miralis.img");\n                        type = "firmware";\n                        os = "u-boot";\n                        load = <0x0 0x43000000>;\n                        entry = <0x0 0x43000000>;\n                        compression = "none";\n                };\n\n                virtual-firmware {\n                        description = "virtual firmware";\n                        data = /incbin/("./visionfive2_fw_payload.bin");\n                        type = "firmware";\n                        arch = "riscv";\n                        load = <0x0 0x40000000>;\n                        compression = "none";\n                };\n        };\n\n    configurations {\n        default = "config-1";\n\n        config-1 {\n            description = "U-boot-spl FIT config for JH7110 VisionFive2";\n            firmware = "firmware";\n            loadables = "virtual-firmware";\n        };\n    };\n};\n'})}),"\n",(0,s.jsxs)(i.p,{children:["This ITS file lists two firmware images: one named ",(0,s.jsx)(i.code,{children:"firmware"}),", which contains the Miralis binary, and another named ",(0,s.jsx)(i.code,{children:"virtual-firmware"}),", which contains the StarFive firmware (OpenSBI with a few patches).\nThe ",(0,s.jsx)(i.code,{children:"data"})," field of the ITS lists the paths to the binaries. In the above file, we use the release build of Miralis and assume that the VisionFive 2 firmware is named ",(0,s.jsx)(i.code,{children:"./visionfive2_fw_payload.bin"}),".\nThe ",(0,s.jsx)(i.code,{children:"load"})," field specifies the load address for the binaries.\nFor compatibility with the VisionFive 2 firmware, we do not change the load address of the VisionFive 2 firmware (at 0x40000000), but we set the entry point for Miralis at 0x43000000."]}),"\n",(0,s.jsxs)(i.p,{children:["The VisionFive 2 firmware can be either ",(0,s.jsx)(i.a,{href:"https://github.com/starfive-tech/VisionFive2",children:"built from source"})," or extracted from the official FIT image.\nTo extract the firmware binary, download the FIT image (",(0,s.jsx)(i.code,{children:"visionfive2_fw_payload.img"}),") from the ",(0,s.jsx)(i.a,{href:"https://github.com/starfive-tech/VisionFive2/releases/tag/JH7110_VF2_515_v5.14.0",children:"release page"}),", and install ",(0,s.jsx)(i.a,{href:"https://man.archlinux.org/man/dumpimage.1.en",children:"dumpimage"})," (often bundled with ",(0,s.jsx)(i.code,{children:"mkimage"}),"), then run:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sh",children:"dumpimage -T flat_dt -p 0 -o fw_payload.bin visionfive2_fw_payload.img\n"})}),"\n",(0,s.jsxs)(i.p,{children:["This will extract ",(0,s.jsx)(i.code,{children:"visionfive2_fw_payload.bin"})," from the FIT image."]}),"\n",(0,s.jsxs)(i.p,{children:["A new FIT image with Miralis can then be created using the ",(0,s.jsx)(i.code,{children:"mkimage"})," tool:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"mkimage -f artifacts/visionfive2.its -A riscv -O u-boot -T firmware artifacts/miralis_visionfive2.img\n"})}),"\n",(0,s.jsx)(i.h3,{id:"summary-building-the-miralis-image",children:"Summary: building the Miralis image"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Build Miralis for the VisionFive 2"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"just build config/visionfive2-release.toml\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Extract the VisionFive 2 firmware"})," (",(0,s.jsx)(i.code,{children:"fw_payload.bin"}),"):"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"cd artifacts\ncurl -L -O https://github.com/starfive-tech/VisionFive2/releases/download/JH7110_VF2_515_v5.14.0/visionfive2_fw_payload.img\ndumpimage -T flat_dt -p 0 -o visionfive2_fw_payload.bin visionfive2_fw_payload.img\ncd ..\n"})}),"\n",(0,s.jsxs)(i.p,{children:["This will extract the VisionFive 2 firmware to ",(0,s.jsx)(i.code,{children:"artifacts/visionfive2_fw_payload.bin"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Copy the ITS file above"})," (the one starting with ",(0,s.jsx)(i.code,{children:"/dts-v1/;"}),") to ",(0,s.jsx)(i.code,{children:"artifacts/visionfive2.its"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Generate the FIT image"})," using the ",(0,s.jsx)(i.code,{children:"mkimage"})," command:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"mkimage -f artifacts/visionfive2.its -A riscv -O u-boot -T firmware artifacts/miralis_visionfive2.img\n"})}),"\n",(0,s.jsxs)(i.p,{children:["This will create the FIT image at ",(0,s.jsx)(i.code,{children:"artifacts/miralis_visionfive2.img"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"flashing-the-miralis-image",children:"Flashing the Miralis Image"}),"\n",(0,s.jsxs)(i.p,{children:["The Miralis FIT image can be installed on the VisionFive 2 through the recovery bootloader.\nThe recovery images are available at ",(0,s.jsx)(i.a,{href:"https://github.com/starfive-tech/Tools/tree/master/recovery",children:"https://github.com/starfive-tech/Tools/tree/master/recovery"}),".\nYou can download it with:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"curl -L -o artifacts/jh7110-recovery-20230322.bin https://github.com/starfive-tech/Tools/raw/refs/heads/master/recovery/jh7110-recovery-20230322.bin\n"})}),"\n",(0,s.jsxs)(i.p,{children:["Then connect to the serial (UART) output of the VisionFive 2 (see the ",(0,s.jsx)(i.a,{href:"https://doc-en.rvspace.org/VisionFive2/PDF/VisionFive2_QSG.pdf",children:"Quick Start Guide"}),"; on Linux and macOS, we recommend using ",(0,s.jsx)(i.code,{children:"minicom"}),")."]}),"\n",(0,s.jsxs)(i.p,{children:["First, start the board in UART boot mode (see pictures below). You should see ",(0,s.jsx)(i.code,{children:"CCCCCCCCCCCCC"})," on the serial port, which indicates that the board is waiting for an image to be uploaded.\nUpload the recovery bootloader ",(0,s.jsx)(i.code,{children:"jh7110-recovery-20230322.bin"}),".\nOn Linux with ",(0,s.jsx)(i.code,{children:"minicom"}),", this is done by pressing ",(0,s.jsx)(i.code,{children:"Ctrl-A"}),", then ",(0,s.jsx)(i.code,{children:"S"}),", and uploading the file through XMODEM."]}),"\n",(0,s.jsxs)(i.p,{children:["The recovery bootloader will then present a menu with multiple options to re-flash the board.\nSelect option ",(0,s.jsx)(i.code,{children:"2"})," (",(0,s.jsx)(i.code,{children:"update fw_verif/uboot in the flash"}),").\nOnce again, the serial output will print ",(0,s.jsx)(i.code,{children:"CCCCCCCCCCCCC"}),". This time, upload the Miralis FIT image from the previous section (",(0,s.jsx)(i.code,{children:"miralis_visionfive2.img"}),").\nFinally, reboot from the flash (see picture below).\nYou should now see logs from Miralis on the serial port followed by OpenSBI: Miralis has been successfully installed and OpenSBI is running in virtual M-mode."]}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"UART boot"}),(0,s.jsx)(i.th,{children:"Flash boot"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)("img",{src:"/img/docs/visionfive2_uart_boot_mode.jpeg",height:"500"})}),(0,s.jsx)(i.td,{children:(0,s.jsx)("img",{src:"/img/docs/visionfive2_flash_boot_mode.jpeg",height:"500"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Switches are near the numbers"}),(0,s.jsx)(i.td,{children:"Switches are away from the numbers"})]})]})]}),"\n",(0,s.jsx)(i.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Minicom"}),":"]}),"\n",(0,s.jsx)(i.p,{children:"If you get NAK on sector errors in Minicom, make sure you have the following settings:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"F - Hardware Flow Control: Yes\nG - Software Flow Control: No\n"})}),"\n",(0,s.jsxs)(i.p,{children:["On macOS, the XMODEM tools are not installed by default (and they do not come with ",(0,s.jsx)(i.code,{children:"minicom"})," either).\nTo get ",(0,s.jsx)(i.code,{children:"minicom"})," working, first install ",(0,s.jsx)(i.a,{href:"https://formulae.brew.sh/formula/lrzsz#default",children:(0,s.jsx)(i.code,{children:"lsx"})}),".\nThen in ",(0,s.jsx)(i.code,{children:"minicom"}),", change the XMODEM program to ",(0,s.jsx)(i.code,{children:"lsx -vv"}),"."]})]})}function c(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>a});var s=n(6540);const r={},t=s.createContext(r);function o(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);