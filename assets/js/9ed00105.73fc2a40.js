"use strict";(self.webpackChunkwebsite_miralis=self.webpackChunkwebsite_miralis||[]).push([[3873],{1048:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>f,toc:()=>c});var t=i(4848),o=i(8453),r=i(1432);const a='# Miralis configuration example\n#\n# To configure Miralis create a copy of that file named config.toml\n\n[log]\n# The default log level\n# Possible values are: trace, debug, info, warn, error, off\nlevel = "info"\n\n# In addition log levels can be specified for individual modules\n#\n# Each of the five levels can specify a list of modules which will log all\n# message at this or higher priority level. This is useful to selectively log\n# low priority messages (e.g. \'trace\' or \'debug\') while keeping a higher\n# default log level (e.g. \'info\' or \'warn\').\n#\n# By default only the default log level is taken into account.\ntrace = ["miralis::virt", "miralis::arch::metal"]\ndebug = ["miralis::arch"]\ninfo = []\nwarn = []\nerror = []\n\n# Use color in logs (using ANSI escape sequences).\n# Default to true.\ncolor = true\n\n[debug]\n# Maximum number of firmware exits before terminating.\n# No maximum cap if not present\nmax_firmware_exits = 400\n\n# Number of iterations to be used by benchmark firmware.\n# What is iterated on may vary from one firmware to another.\nnb_iter = 1000\n\n[vcpu]\n# Maximum number of PMP exposed to the firmware.\n# No maximum by default.\nmax_pmp = 8\n\n# Wether to delegate performance counters to the firmware\n# By default Miralis does not delegate the performance counters.\ndelegate_perf_counters = false\n\n[platform]\n# Name of the platform (i.e. board) to compile for.\n# Default to "qemu_virt"\nname = "qemu_virt"\n\n# Nuber of harts (i.e. cores).\n# Default to 1.\nnb_harts = 1\n\n# Id of the boot hart\n# Default to 0\nboot_hart_id = 0\n\n[qemu]\n\n# Qemu machine (virt, sifive_u, spike...) \n# Full list given by qemu-system-riscv64 --machine help\n# Default to "virt"\nmachine = "virt"\n\n# Qemu cpu (rv64, sifive_u54, thread-c906...)\n# Full list given by qemu-system-riscv64 --cpu help\n# Default to "none"\ncpu = "none"\n\n# Amount of memory \nmemory = "2048M"\n\n# The name of a disk artifact (optional)\ndisk = "ubuntu"\n\n[target.miralis]\n# Build profile for Miralis (dev profile is set by default)\nprofile = "dev"\n\n# Miralis binary will be compiled with this value as a start address\n# Default to "0x80000000"\nstart_address = 0x80000000\n\n# Size of the Miralis\' stack for each hart (i.e. core)\n# Default to 0x8000\nstack_size = 0x8000\n\n[target.firmware]\n# Build profile for the firmware (dev profile is set by default)\nprofile = "dev"\n\n# Firmware binary will be compiled with this value as a start address\n# Default to "0x80200000"\nstart_address = 0x80200000\n\n# Size of the firmware stack for each hart (i.e. core)\n# Default to 0x8000\nstack_size = 0x8000\n\n[target.payload]\n# Name or path to the payload binary\nname = "hello_world"\n\n# Build profile for the payload (dev profile is set by default)\nprofile = "dev"\n\n# Payload binary will be compiled with this value as a start address\n# Default to "0x80400000"\nstart_address = 0x80400000\n\n# Size of the payload stack for each hart (i.e. core)\n# Default to 0x8000\nstack_size = 0x8000\n\n[modules]\n# The list of modules to enable\n# Defaults to none\nmodules = ["offload", "keystone", "exit_counter"]\n',l={title:"Configuration",sidebar_position:8},s=void 0,f={id:"configuration",title:"Configuration",description:"Miralis can be configured using a TOML configuration file.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/docs/configuration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Configuration",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Project Overview",permalink:"/docs/overview"},next:{title:"Platforms",permalink:"/docs/platforms/"}},u={},c=[];function d(e){const n={code:"code",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Miralis can be configured using a TOML configuration file.\nThe configuration file can be passed explicitely to the runner: ",(0,t.jsx)(n.code,{children:" runner run --config config/qemu-virt.toml"}),".\nIf no configuration file is provided, the runner looks for a file named ",(0,t.jsx)(n.code,{children:"config.toml"})," at the root of the project."]}),"\n",(0,t.jsx)(n.p,{children:"The list of all configuration options is listed in the example config file below:"}),"\n",(0,t.jsx)(r.A,{language:"jsx",children:a})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);